//2023.03.20

/*
    클래스 (class)
    객체를 생성하기 위한 템플릿

    1. 클래스 인스턴스
    2. static 속성과 static 메서드
    3. 미리 정의된 클래스
    4. 리터럴 표기법

*/


//1. 클래스 인스턴스

// class Cat {
//     //생성자 함수 : 인스턴스 속성을 설정하기 위해 사용된다.
//     constructor(name,age){ 
//         this.name = name;
//         this.age = age;
//     }
//     //클래스 멤버 (속성)
//     home = null;

//     //클래스 멤버(메서드)

//     sound(){
//         return '야옹';
//     }
// }
// //Cat 클래스의 인스턴스
// //자바스크립트에서의 객체 생성 방법
// const cat = new Cat('치즈', 2);
// console.log(cat);

// //instanceof = 포함관계를 확인한다.
// console.log(cat instanceof Cat); //true

// //객체 내부 속성 접근
// //상속 (코드재사용)
// console.log(cat.home); //null

// //상속 
// console.log(cat.sound());

/*
    2.static 속성과 static 메서드

    클래스와 인스턴스와 관련된 유틸리티를 제공한다.

*/

// class Cat{
//     //...(생성자, 멤버 등...)

//     //static 속성
//     static family = '고양잇과'

//     //static 메서드
//     static isAdult(age){
//         if(age < 1){
//             return '아기고양이';
//         }else {
//             return '성체고양이';
//         }
//     }
// }

// //static 속성과 메서드는 클래스 자체가 호출한다.
// //static 속성이 붙은것은 하나만 만들수 있기 때문
// console.log(Cat.family); //고양잇과

// console.log(Cat.isAdult(3)); //성체고양이


//Math클래스는 전부 정적 클래스.
// var pi = Math.PI;
// console.log(pi);


/*
    3. 미리 정의된 클래스

    문자처리 : String
    숫자 및 날짜 : Number, Math, Date
    인덱스가 있는 콜렉션 : Array
    에러 : SyntaxError, ReferenceError 기타 에러 등
    기타 : Promise, JSON

*/


/*
    4. 리터럴 표기법

*/

// //String 클래스의 인스턴스
// var foo = new String('bar'); //클래스를 이용해서 생성
// var foo = 'bar'; // 리터럴 표기법 (값만 적는다)

// console.log(foo.toUpperCase());
// //둘 중 어느것을 사용해도 String클래스의 인스턴스이다.
// //javaScript는 모든값이 객체다.

// //Number의 인스턴스
// var year = new Number(2023); //클래스
// var year = 2023; //리터럴 표기


// //Object의 인스턴스
// var o = new Object({prop1:'foo', prop2:'bar'}); //클래스
// var o = {prop1:'foo', prop2:'bar'}; //리터럴 표기


/*
    Q. 다음을 클래스로 정의해보세요

    클래스 이름 :Beer

    인스턴스의 속성 : name, origin(원산지)

    클래스 속성 멤버
    history : B.C 3000;

    클래스 메서드 멤버
    recipe(제조법) : 보리, 홉, 효모, 물 등

    static 속성
    caution(경고): 지나친 음주는 돈이 많이 듭니다.
*/

// class Beer{
//     //인스턴스의 속성 생성
//     constructor(name,origin){
//         this.name = name;
//         this.origin = origin;
//     }
//     //클래스 속성 멤버
//     history = 'B.C 3000';
//     //클래스 메서드 멤버
//     recipy(){
//         return '보리, 홉, 효모, 물 등';
//     }
//     //static 멤버
//     static caution = '지나친 음주는 돈이 많이 듭니다.';
// }

// //Beer의 인스턴스
// var irishBeer = new Beer('기네스', '아일랜드');
// var dutchBeer = new Beer('하이네켄', '네덜란드');

// console.log(irishBeer);
// console.log(dutchBeer);

// //메서드
// console.log(irishBeer.recipy());

// //static 속성
// console.log(Beer.caution);

/*
    에러와 에러처리

    1. 에러개념
    2. 에러처리
    3. 에러종류
    4. 커스텀 에러
*/


/*
    1. 에러개념
    에러는 프로그램의 실행을 중단시킨다
    에러는 처리가 되어야 한다.

*/
// console.log(foo);
//ReferenceError: foo is not defined //foo가 정의되지 않음.

//ReferenceError : name
//foo is not defiend : message
//at Object.... : stack //(에러에 대한 자세한 정보, 위치)

// > app crashed(실행 중단)

/*
    2. 에러 처리

    try/catch

*/

// try{
//     // 코드...
//     console.log(foo);

// }catch(error){
//     console.error(error);
// }

/*
    3. 에러의 종류
    
    ReferenceError(참조 에러)
    SyntaxError(문법 에러)
    TypeError(타입 에러)
    RangeError(범위 에러)
    URIError(URI 에러)

*/

// //1. ReferenceError
// //존재하지 않는 변수를 참조할 때 발생한다.
// console.log(x); //ReferenceError

//2. SyntaxError
//문법이 잘못되었을때 발생한다.
//컴파일 에러를 발생시킨다
//에러 처리를 할 수 없다 (코드 자체의 실행이 실패하기 때문)

// console.log(2023)); //SyntaxError : Unexpected token ')'

//TypeError
//변수 또는 매개변수가 유효한 타입이 아닐때 발생한다.

// //setInterval(callback, ms)
// setInterval(null, 1000); 
// //TypeError 
// //The "callback" argument must be of type function. Received null

//RangeError
//값이 지정한 범위를 벗어났을 때 발생한다.

// var pi = Math.PI;

// console.log(pi);

// //Precision : 소숫점 이하로 몇 자리를 표시할 것인지 정할 수 있다.(최대 100)
// console.log(pi.toPrecision(200));
// //RangeError 
// //toPrecision() argument must be between 1 and 100


//URIError
// //encodeURI 또는 decodeURI 함수가 유효하지 않은 인자를 전달받았을 때 발생한다.
// console.log(decodeURI('%'));
// //URIError
// //URI malformed


/*
    4. 커스텀 에러

*/

// try{
//     var age = 15;
//     console.log('학생:', '아저씨 담배하나 주세요');


//     //throw로, 결과값이 true면 에러 항목으로 이행하는 함수
//     //에러를 발생시켰다.
//     if(age < 18){
//         //throw 커스텀 에러
//         throw '미성년자는 담배를 살 수 없습니다.';
//     }

//     //throw 아래 코드는 실행되지 않는다.
//     console.log('CU직원 : ', '여기있습니다');
// }catch(error){
//     console.error('실패:',error);

// }finally{
//     //에러 발생 여부와 상관없이 항상 실행된다.
//     //있어도 되고, 없어도 된다.
//     console.log('끝');
// }
