VS code 터미널 이용

터미널을 powershell에서 명령 프롬프트로 바꿔준다.

cd JavaScript -> nodemon

자동저장을 해놓지 않으면, 일일이 저장해야 콘솔에 결과가 도출된다.(파일 변경시마다 호출)

^C, D: 등을 이용하여 드라이브 이동도 할 수 있다.


// var foo = 'bar';

// //인수의 타입을 리턴한다
// console.log('foo의 타입:', typeof foo);


// Q. 연산자 문제
// 다음 문장을 표현식으로 작성해보세요.
// 나이가 13세이상 19세 이하(청소년)
//age >= 13 && age <= 19

/*
    조건문

    1. if 조건문
    2. switch 조건문
    3. ? (삼항연산자) 조건문

*/


/*
    1. if 조건문

    if(조건){
        조건이 참일 경우 실행되는 코드
    }

*/

// var year = 2023;

// if(year === 2023){
//     console.log('이번 년도');
// }


// var year = 2023;

// if(year === 2023){
//     console.log('이번 년도');
// }else{
//     console.log('이번 년도가 아닙니다.')
// }

// var year = 2023;
// if(year === 2022){
//     console.log('작년');
// }else if(year === 2023){
//     console.log('올해');
// }else if(year === 2024){
//     console.log('내년');
// }else{
//     console.log('가까운 년도가 아닙니다.');
// }

/*
    2. switch 조건문
    엄격동등비교를 수행한다.

*/

// var year = 2023;

// switch(year){
//     case 2022:
//         console.log('작년');
//         break;
//     case 2023:
//         console.log('올해');
//         break;
//     case 2024:
//         console.log('내년');
//         break;
//     default:
//         console.log('가까운 년도가 아닙니다.')

// }


/*
    삼항연산자

    조건 ? 값1 : 값2

    조건이 참이면 값1 리턴
    조건이 거짓이면 값2 리턴

*/

// var year = 2023;
// console.log(year === 2023 ? '올해' : '올해가 아닙니다.');

/*
    나이가 성인이면 "성인입니다"
    성인이 아니면 "성인이 아닙니다"
    를 출력하는 조건문을 만들어 보세요
    1. if조건문
    2. 삼항연산자 조건문
*/

// var age = 20;

// if(age < 19){
//     console.log('성인이 아닙니다.');
// } else{
//     console.log('성인입니다.');
// }

// console.log(age < 19 ? '성인이 아닙니다.' : '성인입니다.');

/*
    반복문

    1. for 반복문
    2. while 반복문

*/


//for 반복문

// for(var i = 0; i < 10; i++){
//     console.log((i+1)+'번 실행되었습니다.');
// }


//1에서 10까지의 합을 구한다
// var sum = 0;

// for(var i = 1; i <= 10; i++){
//     sum += i; //sum = sum + i;
// }

// console.log(sum);

//while 반복문

// let i = 0;

// while(i < 10){
//     console.log (i+'번 실행되었습니다.');
//     i++;
// }


// Q. 반복문

/*
    1/1, 1/2, 1/3, ... 1/10까지의 합 구하기

*/

// var sum = 0;

// for(var i = 1; i <= 10; i++){
//     sum += (1/i);
//     console.log(sum);
// }


/*
    변수와 상수

    1. 변수 : var, let
    2. 상수 : const
    3. 변수/상수의 범위

*/

//1. var

//변수 초기화
// var foo = 'bar';
// console.log(foo);


// var foo = 'bar'; //초기화
// foo = 'baz'; //재정의(재할당)

// console.log(foo); //baz

// var foo; //변수선언
// foo = 'bar'; //정의

// console.log(foo);

// var foo = 'bar';
// var foo = 'baz'; //재선언

// console.log(foo); //baz


//2. let

// let foo = 'bar';
// console.log(foo);

// let foo = 'bar';
// foo = 'baz'; //재정의

// console.log(foo); //baz

// let foo; //선언
// foo = 'bar'; //정의
// console.log(foo); //bar

// let foo = 'bar';
// let foo = 'baz'; //재선언 불가

//3. const (constant) 상수

// const foo = 'bar';
// console.log(foo); //bar


// const foo; //선언과 정의를 따로 할 수 없음.
// foo = 'bar';

/*
    변수/상수의 범위

    1. 전역 범위
    2. 블록 범위
    3. 지역(함수) 범위

*/


/*
    1 전역 범위
    함수 또는 블록 밖에서 선언된 변수가 갖는 범위

*/

//전역(global) 변수
//어디에서든지 접근 가능하다
// var varInGlobal = true;

// {   //블록
//     console.log(varInGlobal);
// }

// function f() {
//     console.log(varInGlobal);
// }
// f();



/*
    2. 지역 범위(함수 범위)
    함수안에서 선언된 변수가 갖는 범위

*/

// function f(){
//     //함수내에서만 접근 가능
//     var varInFunction = true; 
// }

// console.log(varInFunction);//에러


// 3. 블록 범위
// 블록안에서 선언된 변수가 갖는 범위

// {
//     var varInBlock = true;
//     let letInBlock = true;
//     const constInBlock = true;
// }

// console.log('var', varInBlock); //true
// console.log('let', letInBlock); //에러, 블록 범위를 가짐. 블록 밖에서 접근 불가.
// console.log('const', constInBlock); //에러, 블록 범위를 가짐. 블록 밖에서 접근 불가.


/*
    함수

    정의 : 호출될 때만 실행되는 코드

    1. 함수 선언 방법
    2. 게양
    3. 인자
    4. return
    5. 콜백

*/

/*
    1. 함수 선언 방법

    1. 함수선언식
    2. 함수표현식
    3. 화살표 함수

*/

//함수 선언식

// function f(){
//     console.log('foo');
// }

//함수 표현식
//변수에 익명함수를 할당한다
// var f = function(){
//     console.log('foo');
// }

//화살표 함수

// var f = () =>
// {
//     console.log('foo');
// }

/*
    게양(Hoisting)
*/

// f();
// //함수선언식에만 적용된다

// //함수의 정의가 호출 시점보다 올라간다.
// function f(){
//     console.log('foo');
// }


// let f = function(){
//     console.log('foo');
// }

// f();


//parameter (인자)

// function add(x, y){ //x, y는 파라미터
//     console.log(x+y);
// }

// add(1,2);


//return

// function add(x, y){
//     return x+y;
// }

// var r = add(1,2);
// console.log(r);


/*
    콜백
    다른 함수의 인자가 되는 함수

*/

// function f(callback){
//     let r = callback(); //f함수 내부에서 콜백이 실행되었다.
//     console.log(r);
// }
// function cb(){ //콜백
//     return 'foo';
// }

// f(cb);

//콜백 예시

// function getTime(){
//     let time = new Date().toLocaleTimeString(); //현재시간(초단위까지)
//     console.log(time);
// }

// //setInterval(callback, ms)
// //ms마다 callback을 실행하는 함수
// setInterval(getTime, 1000);


