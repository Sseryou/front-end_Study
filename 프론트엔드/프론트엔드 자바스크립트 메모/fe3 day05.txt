//2023.03.22

/*
    비동기 작업(Asynchronous operations)

    블록킹을 방지하기 위해 사용된다.
    예) 서버에 데이터 요청 등

    1. 동기 작업
    2. 비동기 작업

*/


/*
    1. 동기 작업(Synchronous operation)
    호출된 순서대로 코드가 실행된다

*/
// function f(){
//     console.log('작업1')

// }

// f();
// console.log('작업2');
// //작업1
// //작업2

/*
    2. 비동기 작업(Asynchronous operations)

    빠른 것부터 처리된다
*/


// //서버에 데이터를 요청하고 받는데 1초가 걸린다고 가정
// function fetchData(callback){ //비동기 함수
//     var data ={ foo: 'bar'};

//     //setTimeout(callback, ms): ms 뒤에 callback을 실행한다.
//     setTimeout(function() {
//         callback(null, data);
//     }, 1000);
    
// }

// fetchData(function(error, data) {
//     if(error){
//         return console.error(error);
//     }

//     console.log('서버에서 받은 데이터 : ', data);
// });
// //'다음 작업'이 빠르게 처리되기 때문에 먼저 처리된다.
// console.log('다음 작업');
// //대부분의 작업은 동기 작업이다.


/*
    프로미스

    비동기 작업의 성공 실패여부와 그 결과를 나타내는 객체
    비동기 작업의 가독성을 향상시키기 위해 사용된다.
    
    1. 프로미스 객체의 구조
    2. 실제 예시
    3. async/await

*/


/*
    1. 프로미스 객체의 구조

    - 프로미스 인스턴스 생성
    생성자 함수에 두개의 매개변수를 가진 콜백을 전달한다

    첫번째 매개변수(resolve): 비동기 작업이 성공했을 경우 호출한다.
    두번째 매개변수(rejected): 비동기 작업이 실패했을 경우 호출한다.

    - 프로미스의 상태
    fullfilled : 작업의 성공
    rejected : 작업의 실패
    pending : 작업이 끝나기를 기다리는 상태

    - 프로미스 인스턴스의 메서드
    Promise.then(): 성공했을 경우 데이터를 다루는 메서드
    Promise.catch() : 실패했을 경우 데이터를 다루는 메서드
    Promise.finally() : 성공/실패 여부와 상관없이 실행되는 코드를 다루는 메서드


*/

// const promise = new Promise(function(res, rej){
//     res({foo : 'bar'});
// })

// console.log(promise); //fullfilled

// const promise = new Promise(function(res,rej){
//     rej({error : '..'}); //rejected
// })

// console.log(promise);

// const promise = new Promise(function(res,rej){

// })

// console.log(promise); //Promise{<pending>}

// const promise = new Promise(function (res, rej){
//     res({foo : 'bar'});
// })

// //Promise가 성공했을 경우 then으로 보내질 수 있다.
// promise
//     .then(function(value){
//         console.log(value);
//     })
//     //실패할 경우, catch로 보내진다.
//     .catch(function(error){
//         console.error(error);
//     })



/*
    2. 실제 사용 예시
    서버에 데이터 요청
*/


// //서버에 데이터를 요청하는 함수
// // 결과를 프로미스 객체로 리턴한다
// function fetchData(){
//     const promise = new Promise(function(res,rej){
//         res({foo : 'bar'});
//     });
//     return promise;
// }

// fetchData()
//     .then((data)=>{
//         console.log('서버에서 받은 데이터', data);
//     })
//     .catch((error)=>{
//         console.error(error);
//     })


//     console.log('다음 작업');


/*
    3. async / await
    프로미스가 결과값을 반환할 때까지 기다린다.
    프로미스의 가독성을 향상시키기 위한 문법
    try / catch 에서 에러를 처리한다.

*/

// function fetchData(){
//     const promise = new Promise((res, rej) =>{
//         res({foo:'bar'});
//     })

//     return promise;
// }

// f();
// console.log('다음 작업');

// async function f(){
//     //작업이 커져도 크게 가독성을 저하시키지 않는다.
//     //콜백에서 데이터 처리, 에러처리를 둘 다 했었다.
//     //이 문법은 try / catch로 구분을 할 수 있기 때문에
//     //콜백을 많이 쓸 필요가 없다.

//     //미래의 어떤 시점에 결과를 제공하겠다는 약속('프로미스')
//     //를 반환.

//     //프로미스 체인 : 프로미스의 결과값이 프로미스인 경우

//     try{
//         //...

//         const data = await fetchData();

//         console.log('서버에서 받은 데이터 : ', data);

        
//     }catch(error){

//         console.error(error);
//     }
// }


/*
    ES6 문법(2015)

    새로운 문법이 많이 나온 버전

    let, const
    화살표 함수
    구조분해할당 v
    스프레드 연산자 v
    클래스
    프로미스
    심볼
    Array.map()

    프로토타입 기반 언어 javaScript

*/


/*
    구조분해할당 - 배열
    
    간단한 문법을 사용하여 배열의 아이템을 변수에 할당할 수 있다.
*/

// var beers = ['기네스', '하이네켄', '버드와이저'];
// var irishBeer = beers[0];
// var dutchBeer = beers[1];
// var americanBeer = beers[2];

// console.log(irishBeer); //기네스
// console.log(dutchBeer); //하이네켄
// console.log(americanBeer); //버드와이저


// var beers = ['기네스', '하이네켄', '버드와이저'];

// //구조분해할당
// var [irishBeer, dutchBeer, americanBeer] = beers;
// //기존에 만들어진 배열에, 새로운 속성을 집어 넣었다.
// console.log(irishBeer);
// console.log(dutchBeer);
// console.log(americanBeer);


/*
    구조분해할당 - 객체

    간단한 문법으로 객체의 속성을 변수에 할당할 수 있다.
*/

// var irishBeer ={name : '기네스', origin : '아일랜드', available : false};

// var name = irishBeer.name;
// var origin = irishBeer.origin;
// var available = irishBeer.available;

// //console.log(name, origin, available);

// console.log('맥주이름 : ', name);
// console.log('원산지 : ', origin);
// console.log('판매중 : ', available ? '예' : '아니오');

// var irishBeer = {name : '기네스', origin : '아일랜드' ,available: false};
// //구조분해할당
// var {name, origin, available} = irishBeer;
// console.log(name, origin, available);

/*
    구조분해할당 - 매개변수
*/

// var irishBeer = {name : '기네스', origin: '아일랜드', available : false};

// function f(beer){

//     console.log(beer); //irishBeer

//     var name = beer.name;
//     var origin = beer.origin;
//     var available = beer.available;

//     console.log(name, origin, available);

// }

// f(irishBeer);


// //구조분해할당
// var irishBeer = {name : '기네스', origin: '아일랜드', available : false};
// function f({name, origin, available}){
//     console.log(name,origin,available);
// }
// f(irishBeer);


/*
    스프레드 연산자 - 배열
    
    배열의 아이템을 간단하게 복사할 수 있다
    ...복사할 배열
*/

// var beers = ['기네스', '하이네켄'];
// var newBeer = '버드와이저';

// //배열을 복사해서 그대로 넣었다. 그리고 새 배열을 만들어서
// //복사한 배열과 새로운 변수를 붙였다.
// var updatedBeers = [...beers, newBeer];

// console.log(updatedBeers); //기네스, 하이네켄, 버드와이저

// var europeanBeers = ['기네스', '하이네켄'];
// var asianBeers = ['아사히', '클라우드'];

// //배열 두 개를 복사해서 하나로 붙였다.
// var worldBeers = [...europeanBeers, ...asianBeers];

// console.log(worldBeers);

/*
    스프레드 연산자 - 객체

    객체의 속성을 간단하게 복사할 수 있다.
    ...복사할 객체

*/

// var irishBeer = {
//     name : '기네스',
//     origin : '아일랜드',
//     available : false
// }

// // //기네스가 재입고 되었다.
// // irishBeer.available = true;

// // console.log(irishBeer);


// // //기네스가 재입고 되었다.
// // //객체를 복사해서 붙여넣기 하였다.
// var updatedIrishBeer = {...irishBeer, available: true};
// console.log(updatedIrishBeer);

/*
    ES6 문제
*/

// //1. 구조분해할당

// var asianBeers= ['클라우드', '아사히'];
// //구조분해할당 문법을 사용해서 각각의 맥주를 변수에 할당해 보세요.

// var [koreanBeer, japaneseBeer] = asianBeers;
// //프로그래밍에서의 = 은 우변을 좌변에 대입하는 것이다. 
// //아마도 그 원리를 사용한 문법일 것이다...
// console.log(koreanBeer);
// console.log(japaneseBeer);

// //2. 스프레드 연산자
// var cat = {
//     name : '치즈',
//     age : 1,
//     home : null,
//     sound : function(){
//         return '야옹'
//     }

// }

// //스프레드 연산자를 사용해 치즈의 home을 '삼산동'으로 업데이트 해보세요
// //결과는 updateCat변수에 할당
// var updateCat = {...cat, home: '삼산동'};
// //cat객체를 ...cat을 이용해서 복사해서 불러온 후, 객체의 값을 수정하였다.
// //입양됨
// console.log(updateCat);
